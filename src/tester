for(int kk = 0; kk < pmlArr_.size(); kk++)		      |	if(Ez_)
    {								    {
        for(int ii = 0; ii < pmlArr_[kk].thickness(); ii ++)  |	        for(int kk = 0; kk < pmlArr_.size(); kk++)
        {							        {
							      |	            switch(pmlArr_[kk].d())
            switch (pmlArr_[kk].d())			      <
            {							            {
                case X:						                case X:
                    for(int jj =  yPML_ ; jj < ny_ - yPML_; j |	                {
							      >	                    if(yPML_ ==0)
							      >	                        a = 0;
							      >	                    else
							      >	                        a = yPML_;
							      >	                    for(int ii = 1; ii < pmlArr_[kk].thicknes
                    {						                    {
                        if(Ez_)				      |	                        double eps = 1.0;
							      >	                        double kapx = 1.0; double kapy = 1.0;
							      >	                        double sigz = 0.0;
							      >	                        double sigxx = pmlArr_[kk].sigma(stat
							      >	                        double sigxy = pmlArr_[kk].sigma(stat
							      >	                        double sigyx = 0.0;
							      >	                        double sigyy = 0.0;
							      >	                       
							      >	                        double c_bxb = (2*eps*kapy - sigyx*dt
							      >	                        double c_bxe = 2 * eps * dt_ / (dy_ *
							      >	                        double c_hxh = (2*eps*kapz - sigz*dt_
							      >	                        double c_hxb0 = (2*eps*kapx - sigxx*d
							      >	                        double c_hxb1 = (2*eps*kapx + sigxx*d
							      >
							      >	                        double c_byb = (2*eps*kapz - sigz*dt_
							      >	                        double c_bye = 2 * eps * dt_ / (dy_ *
							      >	                        double c_hyh = (2*eps*kapx - sigxy*dt
							      >	                        double c_hyb0 = (2*eps*kapy - sigyy*d
							      >	                        double c_hyb1 = (2*eps*kapy + sigyy*d
							      >	                     
							      >	                        for(int jj =  a; jj < ny_ - a; jj ++)
                        {					                        {
                            double eps = 1.0;		      |
                            double kapx = 1.0; double kapy =  <
                            double sigz = 0.0;		      <
                            double sigxx = pmlArr_[kk].sigma( <
                            double sigxy = pmlArr_[kk].sigma( <
                            double sigyx = 0.0;		      <
                            double sigyy = 0.0;		      <
                            //Kappas change throughout	      <
                            //cout << "store1" <<endl;	      <
                            //cout << jj << "\t" << ny_+1<< " <
                            				      <
                            double c_bxb = (2*eps*kapy - sigy <
                            double c_bxe = 2 * eps * dt_ / (d <
                            double c_hxh = (2*eps*kapz - sigz <
                            double c_hxb0 = (2*eps*kapx - sig <
                            double c_hxb1 = (2*eps*kapx + sig <
							      <
                            double c_byb = (2*eps*kapz - sigz <
                            double c_bye = 2 * eps * dt_ / (d <
                            double c_hyh = (2*eps*kapx - sigx <
                            double c_hyb0 = (2*eps*kapy - sig <
                            double c_hyb1 = (2*eps*kapy + sig <
                            				      <
                            double bxstore = pmlArr_[kk].Bx_-	                            double bxstore = pmlArr_[kk].Bx_-
                            double bystore = pmlArr_[kk].By_-	                            double bystore = pmlArr_[kk].By_-
                            if(jj != ny_-1 && ii != 0)	      |	                            if(jj != ny_-1)
                            {					                            {
                                pmlArr_[kk].Bx_->point(ii,jj)	                                pmlArr_[kk].Bx_->point(ii,jj)
                                pmlArr_[kk].By_->point(ii,jj)	                                pmlArr_[kk].By_->point(ii,jj)
                                				                                
                                Hx_->point(ii,jj) = c_hxh * H	                                Hx_->point(ii,jj) = c_hxh * H
                                Hy_->point(ii,jj) = c_hyh * H	                                Hy_->point(ii,jj) = c_hyh * H
                                				                                
                                sigxy = pmlArr_[kk].sigma(sta	                                sigxy = pmlArr_[kk].sigma(sta
                                c_hyh = (2*eps*kapx - sigxy*d	                                c_hyh = (2*eps*kapx - sigxy*d
                                c_hyb0 = (2*eps*kapy - sigyy*	                                c_hyb0 = (2*eps*kapy - sigyy*
                                c_hyb1 = (2*eps*kapy + sigyy*	                                c_hyb1 = (2*eps*kapy + sigyy*
                                				                                
                                bxstore = pmlArr_[kk].Bx_end_	                                bxstore = pmlArr_[kk].Bx_end_
                                bystore = pmlArr_[kk].By_end_	                                bystore = pmlArr_[kk].By_end_

                                pmlArr_[kk].Bx_end_->point(ii	                                pmlArr_[kk].Bx_end_->point(ii
                                pmlArr_[kk].By_end_->point(ii	                                pmlArr_[kk].By_end_->point(ii

                                Hx_->point((nx_-1) - ii,jj) =	                                Hx_->point((nx_-1) - ii,jj) =
                                Hy_->point((nx_-1) - ii,jj) =	                                Hy_->point((nx_-1) - ii,jj) =
                                			      <
                            }					                            }
                            else if(ii !=0)		      |	                            else
                            {					                            {
                                pmlArr_[kk].By_->point(ii,jj)	                                pmlArr_[kk].By_->point(ii,jj)
                                Hy_->point(ii,jj) = c_hyh * H	                                Hy_->point(ii,jj) = c_hyh * H
                                				                                
                                sigxy = pmlArr_[kk].sigma(sta	                                sigxy = pmlArr_[kk].sigma(sta
                                c_hyh = (2*eps*kapx - sigxy*d	                                c_hyh = (2*eps*kapx - sigxy*d
                                c_hyb0 = (2*eps*kapy - sigyy*	                                c_hyb0 = (2*eps*kapy - sigyy*
                                c_hyb1 = (2*eps*kapy + sigyy*	                                c_hyb1 = (2*eps*kapy + sigyy*
                                				                                
                                bystore = pmlArr_[kk].By_end_	                                bystore = pmlArr_[kk].By_end_
                                pmlArr_[kk].By_end_->point(ii	                                pmlArr_[kk].By_end_->point(ii
                                Hy_->point((nx_-1) - ii,jj) =	                                Hy_->point((nx_-1) - ii,jj) =
                            }					                            }
                            else if (jj != ny_-1)	      <
                            {				      <
                                pmlArr_[kk].Bx_->point(ii,jj) <
                                pmlArr_[kk].By_->point(ii,jj) <
                                Hx_->point(ii,jj) = c_hxh * H <
                                Hy_->point(ii,jj) = c_hyh * H <
                                bxstore = pmlArr_[kk].Bx_end_ <
                                pmlArr_[kk].Bx_end_->point(ii <
                                Hx_->point((nx_-1) - ii,jj) = <
                            }				      <
                                			      <
                        }					                        }
                        else				      |	                    }
							      >	                    double eps = 1.0;
							      >	                    double kapx = 1.0; double kapy = 1.0; dou
							      >	                    double sigz = 0.0;
							      >	                    double sigxx = pmlArr_[kk].sigma(0.0);
							      >	                    double sigxy = pmlArr_[kk].sigma(0.5);
							      >	                    double sigyx = 0.0;
							      >	                    double sigyy = 0.0;
							      >	                    
							      >	                    double c_bxb = (2*eps*kapy - sigyx*dt_) /
							      >	                    double c_bxe = 2 * eps * dt_ / (dy_ * (2*
							      >	                    double c_hxh = (2*eps*kapz - sigz*dt_) / 
							      >	                    double c_hxb0 = (2*eps*kapx - sigxx*dt_) 
							      >	                    double c_hxb1 = (2*eps*kapx + sigxx*dt_) 
							      >
							      >	                    double c_byb = (2*eps*kapz - sigz*dt_) / 
							      >	                    double c_bye = 2 * eps * dt_ / (dy_ * (2*
							      >	                    double c_hyh = (2*eps*kapx - sigxy*dt_) /
							      >	                    double c_hyb0 = (2*eps*kapy - sigyy*dt_) 
							      >	                    double c_hyb1 = (2*eps*kapy + sigyy*dt_) 
							      >	                    if(yPML_ !=0)
							      >	                    {
							      >	                        for(int jj = a; jj < ny_ - a; jj++)
                        {					                        {
							      >	                            double bxstore = pmlArr_[kk].Bx_-
							      >	                            double bystore = pmlArr_[kk].By_-
							      >	                            pmlArr_[kk].Bx_->point(0,jj) = c_
							      >	                            pmlArr_[kk].By_->point(0,jj) = c_
							      >	                            Hx_->point(0,jj) = c_hxh * Hx_->p
							      >	                            Hy_->point(0,jj) = c_hyh * Hy_->p
                            					                            
							      >	                            bxstore = pmlArr_[kk].Bx_end_->po
							      >	                            pmlArr_[kk].Bx_end_->point(0,jj) 
							      >	                            Hx_->point((nx_-1) - 0,jj) = c_hx
                        }					                        }
                    }						                    }
							      >	                    else
							      >	                    {
							      >	                        for(int jj = 0; jj < ny_ - 1; jj++)
							      >	                        {
							      >	                            double bxstore = pmlArr_[kk].Bx_-
							      >	                            double bystore = pmlArr_[kk].By_-
							      >	                            pmlArr_[kk].Bx_->point(0,jj) = c_
							      >	                            pmlArr_[kk].By_->point(0,jj) = c_
							      >	                            Hx_->point(0,jj) = c_hxh * Hx_->p
							      >	                            Hy_->point(0,jj) = c_hyh * Hy_->p
							      >	                            
							      >	                            bxstore = pmlArr_[kk].Bx_end_->po
							      >	                            pmlArr_[kk].Bx_end_->point(0,jj) 
							      >	                            Hx_->point((nx_-1) - 0,jj) = c_hx
							      >	                        }
							      >	                    }             
                    break;					                    break;
							      >	                }
                case Y:						                case Y:
                {						                {
                    for(int jj = xPML_; jj < nx_ - xPML_; jj  |	                    if(xPML_ ==0)
							      >	                        a = 0;
							      >	                    else
							      >	                        a = xPML_;
							      >	                    double eps = 1.0;
							      >	                    double kapx = 1.0; double kapy = 1.0; dou
							      >	                    double sigz = 0.0;
							      >	                    double sigxx = 0.0;
							      >	                    double sigxy = 0.0;
							      >	                    double sigyx = pmlArr_[kk].sigma(0.5);
							      >	                    double sigyy = pmlArr_[kk].sigma(0.0);
							      >	                    
							      >	                    double c_bxb = (2*eps*kapy - sigyx*dt_) /
							      >	                    double c_bxe = 2 * eps * dt_ / (dy_ * (2*
							      >	                    double c_hxh = (2*eps*kapz - sigz*dt_) / 
							      >	                    double c_hxb0 = (2*eps*kapx - sigxx*dt_) 
							      >	                    double c_hxb1 = (2*eps*kapx + sigxx*dt_) 
							      >
							      >	                    double c_byb = (2*eps*kapz - sigz*dt_) / 
							      >	                    double c_bye = 2 * eps * dt_ / (dy_ * (2*
							      >	                    double c_hyh = (2*eps*kapx - sigxy*dt_) /
							      >	                    double c_hyb0 = (2*eps*kapy - sigyy*dt_) 
							      >	                    double c_hyb1 = (2*eps*kapy + sigyy*dt_) 
							      >	                     
							      >	                    if(xPML_ !=0)
                    {						                    {
                        if(Ez_)				      |	                        for(int jj = a; jj < nx_ - a; jj++)
                        {					                        {
                            double eps = 1.0;		      |	                            double bxstore = pmlArr_[kk].Bx_-
                            double kapx = 1.0; double kapy =  |	                            double bystore = pmlArr_[kk].By_-
                            double sigz = 0.0;		      |	                            pmlArr_[kk].Bx_->point(jj,0) = c_
                            double sigxx = 0.0;		      |	                            pmlArr_[kk].By_->point(jj,0) = c_
                            double sigxy = 0.0;		      |	                            //cout <<"H1"<<endl;
                            double sigyx = pmlArr_[kk].sigma( |	                            Hx_->point(jj,0) = c_hxh * Hx_->p
                            double sigyy = pmlArr_[kk].sigma( |	                            Hy_->point(jj,0) = c_hyh * Hy_->p
                            //Kappas change throughout	      |	                            bystore = pmlArr_[kk].By_end_->po
                            //cout << "store1" <<endl;	      |	                            pmlArr_[kk].By_end_->point(jj,0) 
                            //cout << jj << "\t" << ny_+1<< " |	                            Hy_->point(jj,(ny_-1)-0) = c_hyh 
                            				      |	                        }
                            double c_bxb = (2*eps*kapy - sigy |	                    }
                            double c_bxe = 2 * eps * dt_ / (d |	                    else
                            double c_hxh = (2*eps*kapz - sigz |	                    {
                            double c_hxb0 = (2*eps*kapx - sig |	                        for(int jj = 0; jj < nx_ - 1; jj++)
                            double c_hxb1 = (2*eps*kapx + sig |	                        {
							      |	                            double bxstore = pmlArr_[kk].Bx_-
                            double c_byb = (2*eps*kapz - sigz |	                            double bystore = pmlArr_[kk].By_-
                            double c_bye = 2 * eps * dt_ / (d |	                            pmlArr_[kk].Bx_->point(jj,0) = c_
                            double c_hyh = (2*eps*kapx - sigx |	                            pmlArr_[kk].By_->point(jj,0) = c_
                            double c_hyb0 = (2*eps*kapy - sig |	                            //cout <<"H1"<<endl;
                            double c_hyb1 = (2*eps*kapy + sig |	                            Hx_->point(jj,0) = c_hxh * Hx_->p
							      |	                            Hy_->point(jj,0) = c_hyh * Hy_->p
                            				      |	                            bystore = pmlArr_[kk].By_end_->po
                            if(ii!=0 && jj != nx_-1)	      |	                            pmlArr_[kk].By_end_->point(jj,0) 
							      >	                            Hy_->point(jj,(ny_-1)-0) = c_hyh 
							      >	                        }
							      >	                    }   
							      >	                    for(int ii = 1; ii < pmlArr_[kk].thicknes
							      >	                    {
							      >	                         eps = 1.0;
							      >	                         kapx = 1.0;  kapy = 1.0;  kapz = 1.0
							      >	                         sigz = 0.0;
							      >	                         sigxx = 0.0;
							      >	                         sigxy = 0.0;
							      >	                         sigyx = pmlArr_[kk].sigma(static_cas
							      >	                         sigyy = pmlArr_[kk].sigma(static_cas
							      >	                        
							      >	                         c_bxb = (2*eps*kapy - sigyx*dt_) / (
							      >	                         c_bxe = 2 * eps * dt_ / (dy_ * (2*ep
							      >	                         c_hxh = (2*eps*kapz - sigz*dt_) / (2
							      >	                         c_hxb0 = (2*eps*kapx - sigxx*dt_) / 
							      >	                         c_hxb1 = (2*eps*kapx + sigxx*dt_) / 
							      >
							      >	                         c_byb = (2*eps*kapz - sigz*dt_) / (2
							      >	                         c_bye = 2 * eps * dt_ / (dy_ * (2*ep
							      >	                         c_hyh = (2*eps*kapx - sigxy*dt_) / (
							      >	                         c_hyb0 = (2*eps*kapy - sigyy*dt_) / 
							      >	                         c_hyb1 = (2*eps*kapy + sigyy*dt_) / 
							      >	                        
							      >	                        for(int jj =  a; jj < nx_ - a; jj ++)
							      >	                        {
							      >	                            if(jj != nx_-1)
                            {					                            {
                                double bxstore = pmlArr_[kk].	                                double bxstore = pmlArr_[kk].
                                double bystore = pmlArr_[kk].	                                double bystore = pmlArr_[kk].
                                pmlArr_[kk].Bx_->point(jj,ii)	                                pmlArr_[kk].Bx_->point(jj,ii)
                                pmlArr_[kk].By_->point(jj,ii)	                                pmlArr_[kk].By_->point(jj,ii)
                                //cout <<"H1"<<endl;		                                //cout <<"H1"<<endl;
                                Hx_->point(jj,ii) = c_hxh * H	                                Hx_->point(jj,ii) = c_hxh * H
                                Hy_->point(jj,ii) = c_hyh * H	                                Hy_->point(jj,ii) = c_hyh * H

                                sigyx = pmlArr_[kk].sigma(sta	                                sigyx = pmlArr_[kk].sigma(sta
                                c_bxb = (2*eps*kapy - sigyx*d	                                c_bxb = (2*eps*kapy - sigyx*d
                                c_bxe = 2 * eps * dt_ / (dy_ 	                                c_bxe = 2 * eps * dt_ / (dy_ 

                                bxstore = pmlArr_[kk].Bx_end_	                                bxstore = pmlArr_[kk].Bx_end_
                                bystore = pmlArr_[kk].By_end_	                                bystore = pmlArr_[kk].By_end_
                                pmlArr_[kk].Bx_end_->point(jj	                                pmlArr_[kk].Bx_end_->point(jj
                                pmlArr_[kk].By_end_->point(jj	                                pmlArr_[kk].By_end_->point(jj
                                //cout <<"H2"<<endl;		                                //cout <<"H2"<<endl;
                                Hx_->point(jj,(ny_-1)-ii) = c	                                Hx_->point(jj,(ny_-1)-ii) = c
                                Hy_->point(jj,(ny_-1)-ii) = c	                                Hy_->point(jj,(ny_-1)-ii) = c
							      <
                            }				      <
                            else if (jj != nx_-1)	      <
                            {				      <
                                double bxstore = pmlArr_[kk]. <
                                double bystore = pmlArr_[kk]. <
                                pmlArr_[kk].Bx_->point(jj,ii) <
                                pmlArr_[kk].By_->point(jj,ii) <
                                //cout <<"H1"<<endl;	      <
                                Hx_->point(jj,ii) = c_hxh * H <
                                Hy_->point(jj,ii) = c_hyh * H <
                                bystore = pmlArr_[kk].By_end_ <
                                pmlArr_[kk].By_end_->point(jj <
                                Hy_->point(jj,(ny_-1)-ii) = c <
                            }					                            }
                            else if(ii != 0)		      |	                            else
                            {					                            {
                                double bxstore = pmlArr_[kk].	                                double bxstore = pmlArr_[kk].

                                pmlArr_[kk].Bx_->point(jj,ii)	                                pmlArr_[kk].Bx_->point(jj,ii)
                                //cout <<"H1"<<endl;		                                //cout <<"H1"<<endl;
                                Hx_->point(jj,ii) = c_hxh * H	                                Hx_->point(jj,ii) = c_hxh * H

                                sigyx = pmlArr_[kk].sigma(sta	                                sigyx = pmlArr_[kk].sigma(sta
                                c_bxb = (2*eps*kapy - sigyx*d	                                c_bxb = (2*eps*kapy - sigyx*d
                                c_bxe = 2 * eps * dt_ / (dy_ 	                                c_bxe = 2 * eps * dt_ / (dy_ 
                                				                                
                                bxstore = pmlArr_[kk].Bx_end_	                                bxstore = pmlArr_[kk].Bx_end_
                                pmlArr_[kk].Bx_end_->point(jj	                                pmlArr_[kk].Bx_end_->point(jj
                                //cout <<"H2"<<endl;		                                //cout <<"H2"<<endl;
                                Hx_->point(jj,(ny_-1)-ii) = c	                                Hx_->point(jj,(ny_-1)-ii) = c
                            }					                            }
                        }					                        }
                        else				      <
                        {				      <
                           				      <
                        }  				      <
                    }						                    }
                    break;				      |	                    
							      >	                    break;    
                }						                }
                case Z:						                case Z:
                    throw logic_error("While yes we could hav |	                    throw logic_error("Third dimension is not
                    break;					                    break;
                default:					                default:
                    throw logic_error("I would appricate it i |	                    throw logic_error("you hit the default th
                    break;					                    break;
            }							            }
        }							        }
    }							      \	    }
